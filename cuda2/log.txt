Iniciando flujo: Compilar y Ejecutar
Proyecto: ViT, Tipo de Compilación: Release
--- Creando directorio de compilación (build) ---
--- Configurando el proyecto con CMake (Modo: Release) ---
-- ✅ Usando GCC 13: /usr/bin/gcc-13
-- OpenMP encontrado, enlazando...
-- ✔️ CMake configurado correctamente para proyecto híbrido C++/CUDA.
-- Configuring done (0.0s)
-- Generating done (0.0s)
-- Build files have been written to: /home/shinji/Escritorio/Proyectos/VisionTransformer/cuda2/build
--- Compilando el proyecto 'ViT' ---
[  3%] Building CXX object CMakeFiles/test.dir/app/test.cpp.o
[ 47%] Built target ViT
[ 68%] Built target testImage
[ 69%] Linking CUDA device code CMakeFiles/test.dir/cmake_device_link.o
[ 71%] Linking CXX executable test
[100%] Built target test
--- Compilación completada ---
--- Ejecutando pruebas sobre el conjunto de test ---
Cargando configuración desde: vit_mnist_30ep_4_8.json
Cargando configuración del modelo desde: models/vit_mnist_30ep_4_8.json...
Configuración cargada correctamente.
Construyendo modelo con la arquitectura cargada...
Cargando pesos desde: vit_mnist_30ep_4_8.weights
Archivo abierto correctamente.
Cargando 104 tensores de parámetros desde models/vit_mnist_30ep_4_8.weights...
[DEBUG] Tensor #0 cargado. Checksum = -1.01448
[DEBUG] Primeros valores: 0.00432787 0.0400063 -0.0570589 
[DEBUG] Tensor #1 cargado. Checksum = -0.0194614
[DEBUG] Primeros valores: 0.0307058 -1.17561e-05 0.0213831 
[DEBUG] Tensor #2 cargado. Checksum = -0.230074
[DEBUG] Primeros valores: -0.0550725 -0.00761175 -0.02527 
[DEBUG] Tensor #3 cargado. Checksum = -0.677653
[DEBUG] Primeros valores: -0.00395322 0.0453598 -0.00618457 
[DEBUG] Tensor #4 cargado. Checksum = 95.0785
[DEBUG] Primeros valores: 1.43239 1.42728 1.44786 
[DEBUG] Tensor #5 cargado. Checksum = -0.0810142
[DEBUG] Primeros valores: -0.032436 -0.00715777 -0.0309516 
[DEBUG] Tensor #6 cargado. Checksum = -1.53026
[DEBUG] Primeros valores: 0.0928652 -0.0190143 -0.00970671 
[DEBUG] Tensor #7 cargado. Checksum = -0.379053
[DEBUG] Primeros valores: -0.0739576 0.041685 -0.0377082 
[DEBUG] Tensor #8 cargado. Checksum = 1.34679
[DEBUG] Primeros valores: -0.145923 -0.0925643 -0.0764459 
[DEBUG] Tensor #9 cargado. Checksum = 0.102565
[DEBUG] Primeros valores: 0.0853495 -0.0645855 -0.0212572 
[DEBUG] Tensor #10 cargado. Checksum = -1.93064
[DEBUG] Primeros valores: 0.0314821 0.0690939 -0.0184949 
[DEBUG] Tensor #11 cargado. Checksum = -0.034992
[DEBUG] Primeros valores: -0.0133084 -0.00352533 -0.013987 
[DEBUG] Tensor #12 cargado. Checksum = -1.84918
[DEBUG] Primeros valores: 0.0542157 0.0457754 0.00580009 
[DEBUG] Tensor #13 cargado. Checksum = 0.0401888
[DEBUG] Primeros valores: 0.0036875 -0.00597924 -0.00583867 
[DEBUG] Tensor #14 cargado. Checksum = 63.606
[DEBUG] Primeros valores: 1.01963 1.04821 0.987765 
[DEBUG] Tensor #15 cargado. Checksum = 0.0787019
[DEBUG] Primeros valores: 0.011974 -0.00350521 -0.00409797 
[DEBUG] Tensor #16 cargado. Checksum = -9.29709
[DEBUG] Primeros valores: -0.0403375 -0.0267875 0.0106686 
[DEBUG] Tensor #17 cargado. Checksum = -14.7323
[DEBUG] Primeros valores: -0.00962332 -0.0155265 -0.0162306 
[DEBUG] Tensor #18 cargado. Checksum = 5.59238
[DEBUG] Primeros valores: -0.00113888 0.00552884 0.0208724 
[DEBUG] Tensor #19 cargado. Checksum = -0.0239869
[DEBUG] Primeros valores: -0.016281 -0.00243289 -0.0115162 
[DEBUG] Tensor #20 cargado. Checksum = 88.8879
[DEBUG] Primeros valores: 1.50312 1.39028 1.39286 
[DEBUG] Tensor #21 cargado. Checksum = -0.174312
[DEBUG] Primeros valores: -0.164815 -0.0416719 0.0614216 
[DEBUG] Tensor #22 cargado. Checksum = 0.922946
[DEBUG] Primeros valores: -0.0210128 0.00814519 -0.0655544 
[DEBUG] Tensor #23 cargado. Checksum = 0.906304
[DEBUG] Primeros valores: -0.00493858 0.0286415 0.0106162 
[DEBUG] Tensor #24 cargado. Checksum = -0.883882
[DEBUG] Primeros valores: -0.111039 -0.11491 0.168383 
[DEBUG] Tensor #25 cargado. Checksum = -0.00445271
[DEBUG] Primeros valores: 0.107926 0.0825771 -0.0517846 
[DEBUG] Tensor #26 cargado. Checksum = -0.886367
[DEBUG] Primeros valores: -0.000342317 -0.042238 -0.0256646 
[DEBUG] Tensor #27 cargado. Checksum = -0.10332
[DEBUG] Primeros valores: -0.00253922 0.00974262 -0.00859499 
[DEBUG] Tensor #28 cargado. Checksum = -0.584054
[DEBUG] Primeros valores: -0.085616 -0.0118025 0.0260994 
[DEBUG] Tensor #29 cargado. Checksum = -0.00292524
[DEBUG] Primeros valores: -0.00406598 -0.00429016 -0.00676752 
[DEBUG] Tensor #30 cargado. Checksum = 62.0276
[DEBUG] Primeros valores: 0.902624 0.931439 0.965092 
[DEBUG] Tensor #31 cargado. Checksum = -0.0254486
[DEBUG] Primeros valores: 0.00834427 -0.00145278 0.00494639 
[DEBUG] Tensor #32 cargado. Checksum = 5.89718
[DEBUG] Primeros valores: 0.00522533 -0.0105373 -0.00194582 
[DEBUG] Tensor #33 cargado. Checksum = -14.3576
[DEBUG] Primeros valores: -0.0158214 -0.0108859 -0.00926926 
[DEBUG] Tensor #34 cargado. Checksum = -0.783857
[DEBUG] Primeros valores: 0.0129106 -0.00973309 0.0231481 
[DEBUG] Tensor #35 cargado. Checksum = 0.0206865
[DEBUG] Primeros valores: -0.00282313 0.000746134 0.00561429 
[DEBUG] Tensor #36 cargado. Checksum = 102.718
[DEBUG] Primeros valores: 1.54788 1.64372 1.73925 
[DEBUG] Tensor #37 cargado. Checksum = 0.266182
[DEBUG] Primeros valores: -0.163124 -0.0530403 0.0506026 
[DEBUG] Tensor #38 cargado. Checksum = -0.790924
[DEBUG] Primeros valores: -0.0644565 0.105158 0.00352346 
[DEBUG] Tensor #39 cargado. Checksum = 0.253318
[DEBUG] Primeros valores: 0.00269782 -0.0934048 0.0101726 
[DEBUG] Tensor #40 cargado. Checksum = 1.34695
[DEBUG] Primeros valores: 0.0636318 -0.581837 -0.0415608 
[DEBUG] Tensor #41 cargado. Checksum = 0.269679
[DEBUG] Primeros valores: 0.0995985 0.0375253 0.357081 
[DEBUG] Tensor #42 cargado. Checksum = -0.384925
[DEBUG] Primeros valores: -0.0456084 -0.00200131 0.00726347 
[DEBUG] Tensor #43 cargado. Checksum = -0.0386625
[DEBUG] Primeros valores: -0.000465638 0.00264597 0.00985954 
[DEBUG] Tensor #44 cargado. Checksum = 0.60818
[DEBUG] Primeros valores: 0.0362173 0.0130513 0.00616388 
[DEBUG] Tensor #45 cargado. Checksum = -0.00450681
[DEBUG] Primeros valores: 0.00237409 0.00567091 0.0151164 
[DEBUG] Tensor #46 cargado. Checksum = 58.5737
[DEBUG] Primeros valores: 0.889957 0.882598 0.900804 
[DEBUG] Tensor #47 cargado. Checksum = 0.0313432
[DEBUG] Primeros valores: 0.0233924 0.000501078 0.0034528 
[DEBUG] Tensor #48 cargado. Checksum = -8.4876
[DEBUG] Primeros valores: -0.0109669 0.0292113 0.0253102 
[DEBUG] Tensor #49 cargado. Checksum = -9.52967
[DEBUG] Primeros valores: -0.0181139 -0.0238477 -0.00787158 
[DEBUG] Tensor #50 cargado. Checksum = 1.88362
[DEBUG] Primeros valores: -0.0343152 0.0230877 -0.023281 
[DEBUG] Tensor #51 cargado. Checksum = -0.0263331
[DEBUG] Primeros valores: 0.000865743 0.00333899 0.00769591 
[DEBUG] Tensor #52 cargado. Checksum = 73.7607
[DEBUG] Primeros valores: 1.0837 1.15402 1.20582 
[DEBUG] Tensor #53 cargado. Checksum = 0.0159266
[DEBUG] Primeros valores: 0.0183256 0.0169761 0.0120238 
[DEBUG] Tensor #54 cargado. Checksum = -0.325962
[DEBUG] Primeros valores: -0.0141721 0.0155704 -0.02096 
[DEBUG] Tensor #55 cargado. Checksum = -0.131482
[DEBUG] Primeros valores: 0.0314578 -0.0136229 -0.024097 
[DEBUG] Tensor #56 cargado. Checksum = 1.31821
[DEBUG] Primeros valores: -0.0938675 0.0760553 0.0397671 
[DEBUG] Tensor #57 cargado. Checksum = -0.00247554
[DEBUG] Primeros valores: -0.16683 0.277163 -0.0660877 
[DEBUG] Tensor #58 cargado. Checksum = -0.114532
[DEBUG] Primeros valores: 0.0335273 0.042498 0.0361757 
[DEBUG] Tensor #59 cargado. Checksum = -0.0884206
[DEBUG] Primeros valores: 0.0129143 0.0075859 0.00094539 
[DEBUG] Tensor #60 cargado. Checksum = 1.41418
[DEBUG] Primeros valores: -0.0163991 -0.0585152 0.0510943 
[DEBUG] Tensor #61 cargado. Checksum = -0.0288604
[DEBUG] Primeros valores: -0.00888873 0.00284608 -0.0014358 
[DEBUG] Tensor #62 cargado. Checksum = 58.0097
[DEBUG] Primeros valores: 0.966815 0.94904 0.90235 
[DEBUG] Tensor #63 cargado. Checksum = -0.0388203
[DEBUG] Primeros valores: -0.00882437 0.0174572 -0.00147881 
[DEBUG] Tensor #64 cargado. Checksum = 2.53867
[DEBUG] Primeros valores: 0.00361253 0.0169305 0.00481789 
[DEBUG] Tensor #65 cargado. Checksum = -8.1599
[DEBUG] Primeros valores: -0.00594181 0.000181578 -0.0161435 
[DEBUG] Tensor #66 cargado. Checksum = 3.01883
[DEBUG] Primeros valores: 0.00468434 -0.0134006 0.00840403 
[DEBUG] Tensor #67 cargado. Checksum = 0.00330589
[DEBUG] Primeros valores: 0.00721424 -0.00610222 0.000763564 
[DEBUG] Tensor #68 cargado. Checksum = 90.8345
[DEBUG] Primeros valores: 1.57338 1.60816 1.24701 
[DEBUG] Tensor #69 cargado. Checksum = 0.0724128
[DEBUG] Primeros valores: 0.136566 0.053933 -0.0329892 
[DEBUG] Tensor #70 cargado. Checksum = 0.479756
[DEBUG] Primeros valores: -0.072297 0.00558441 0.00429603 
[DEBUG] Tensor #71 cargado. Checksum = 0.523967
[DEBUG] Primeros valores: 0.0500932 0.0132233 0.0129064 
[DEBUG] Tensor #72 cargado. Checksum = -3.61776
[DEBUG] Primeros valores: -0.0699511 0.231999 -0.191634 
[DEBUG] Tensor #73 cargado. Checksum = 0.0790643
[DEBUG] Primeros valores: -0.325358 -0.203874 -0.0495288 
[DEBUG] Tensor #74 cargado. Checksum = 1.68984
[DEBUG] Primeros valores: -0.0334744 -0.0584579 -0.0191849 
[DEBUG] Tensor #75 cargado. Checksum = -0.0843863
[DEBUG] Primeros valores: 0.00282924 0.000507511 0.00433527 
[DEBUG] Tensor #76 cargado. Checksum = -1.50486
[DEBUG] Primeros valores: 0.0740126 -0.0753944 -0.037831 
[DEBUG] Tensor #77 cargado. Checksum = 0.00921021
[DEBUG] Primeros valores: 0.0312984 0.009616 -0.0165635 
[DEBUG] Tensor #78 cargado. Checksum = 57.4409
[DEBUG] Primeros valores: 0.912334 0.898207 0.872448 
[DEBUG] Tensor #79 cargado. Checksum = -0.0171823
[DEBUG] Primeros valores: -0.00107341 0.0274498 4.4754e-05 
[DEBUG] Tensor #80 cargado. Checksum = 4.57026
[DEBUG] Primeros valores: -0.0195001 0.00201195 0.0745289 
[DEBUG] Tensor #81 cargado. Checksum = -4.51581
[DEBUG] Primeros valores: -0.00136067 -0.00728404 -0.0180893 
[DEBUG] Tensor #82 cargado. Checksum = 2.76985
[DEBUG] Primeros valores: 0.0408938 0.00583576 0.00668041 
[DEBUG] Tensor #83 cargado. Checksum = 0.0364437
[DEBUG] Primeros valores: 0.0372741 0.0100092 -0.0108818 
[DEBUG] Tensor #84 cargado. Checksum = 73.7607
[DEBUG] Primeros valores: 1.28463 1.19833 1.19185 
[DEBUG] Tensor #85 cargado. Checksum = 0.33176
[DEBUG] Primeros valores: 0.33399 0.176453 -0.191606 
[DEBUG] Tensor #86 cargado. Checksum = 2.42866
[DEBUG] Primeros valores: -0.0602244 0.0351468 -0.0219301 
[DEBUG] Tensor #87 cargado. Checksum = 0.348745
[DEBUG] Primeros valores: 0.0320429 -0.0445613 0.031488 
[DEBUG] Tensor #88 cargado. Checksum = -2.07771
[DEBUG] Primeros valores: -0.153592 0.119243 0.127309 
[DEBUG] Tensor #89 cargado. Checksum = -0.0693012
[DEBUG] Primeros valores: 0.138434 -0.100098 0.0508979 
[DEBUG] Tensor #90 cargado. Checksum = 0.522727
[DEBUG] Primeros valores: -0.043632 0.00704518 -0.00961767 
[DEBUG] Tensor #91 cargado. Checksum = 0.0280152
[DEBUG] Primeros valores: 0.00401373 0.0136684 -0.0121639 
[DEBUG] Tensor #92 cargado. Checksum = -1.20014
[DEBUG] Primeros valores: -0.0725862 0.05233 0.024443 
[DEBUG] Tensor #93 cargado. Checksum = 0.000760712
[DEBUG] Primeros valores: 0.0183045 0.0134259 0.00831602 
[DEBUG] Tensor #94 cargado. Checksum = 58.375
[DEBUG] Primeros valores: 0.933298 0.915717 0.901674 
[DEBUG] Tensor #95 cargado. Checksum = 0.0102318
[DEBUG] Primeros valores: -0.000307171 0.0208086 0.0120181 
[DEBUG] Tensor #96 cargado. Checksum = -1.78154
[DEBUG] Primeros valores: 0.00139703 0.00157543 0.000675326 
[DEBUG] Tensor #97 cargado. Checksum = -4.89161
[DEBUG] Primeros valores: -0.00107274 -0.00100462 -0.000180627 
[DEBUG] Tensor #98 cargado. Checksum = -9.65287
[DEBUG] Primeros valores: -0.000354468 -0.000417523 0.000418945 
[DEBUG] Tensor #99 cargado. Checksum = -0.0077186
[DEBUG] Primeros valores: 0.0236264 0.000778961 -0.00829566 
[DEBUG] Tensor #100 cargado. Checksum = 81.196
[DEBUG] Primeros valores: 1.20172 1.2925 1.27356 
[DEBUG] Tensor #101 cargado. Checksum = 0.0718626
[DEBUG] Primeros valores: 0.0340012 -0.0575711 -0.0122952 
[DEBUG] Tensor #102 cargado. Checksum = -0.847567
[DEBUG] Primeros valores: 0.0145902 -0.0811997 0.112392 
[DEBUG] Tensor #103 cargado. Checksum = -0.0571152
[DEBUG] Primeros valores: -0.0694204 -0.032103 0.0168141 
Pesos cargados correctamente.
Pesos cargados correctamente.
--- Cargando data/mnist_test.csv  (fracción: 10%, μ=0.1307, σ=0.3081)
Carga completa. 1000 muestras cargadas.
  -> Forma de X (imágenes): (1000, 1, 28, 28)
  -> Forma de y (etiquetas): (1000, 10)
X_test shape: (1000, 1, 28, 28)
y_test shape: (1000, 10)
start=0, end=256, current_batch_size=256, batch 1/4
Training
Forward pass del Vision Transformer...
Batch size: 256
Batch size: 256
Parches aplanados: (4096, 49)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (4096, 49), b.shape = (49, 64)
Tensor::matrixMultiply: M = 4096, N = 49, P = 64
Tensor::matrixMultiply: resultado = (4096, 64)
Tensor::matrixMultiply: resultado = (4096, 64)
Salida 2D después de la multiplicación: (4096, 64)
Salida 2D después de añadir bias: (4096, 64)
Parches proyectados: (4096, 64)
--Embeddings::Parches embeddings: (256, 16, 64)
--Embeddings::CLS token batch: (256, 1, 64)
--Embeddings::Embeddings con CLS: (256, 17, 64)
--Embeddings::Embeddings con codificación posicional: (256, 17, 64)
Embeddings calculados. Shape: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Bloques codificadores procesados. Shape: (256, 17, 64)
Normalización final aplicada.  Shape: (256, 17, 64)
Token CLS extraído. Shape: (256, 64)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (256, 64), b.shape = (64, 10)
Tensor::matrixMultiply: M = 256, N = 64, P = 10
Tensor::matrixMultiply: resultado = (256, 10)
Tensor::matrixMultiply: resultado = (256, 10)
Salida 2D después de la multiplicación: (256, 10)
Salida 2D después de añadir bias: (256, 10)
start=256, end=512, current_batch_size=256, batch 2/4
Training
Forward pass del Vision Transformer...
Batch size: 256
Batch size: 256
Parches aplanados: (4096, 49)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (4096, 49), b.shape = (49, 64)
Tensor::matrixMultiply: M = 4096, N = 49, P = 64
Tensor::matrixMultiply: resultado = (4096, 64)
Tensor::matrixMultiply: resultado = (4096, 64)
Salida 2D después de la multiplicación: (4096, 64)
Salida 2D después de añadir bias: (4096, 64)
Parches proyectados: (4096, 64)
--Embeddings::Parches embeddings: (256, 16, 64)
--Embeddings::CLS token batch: (256, 1, 64)
--Embeddings::Embeddings con CLS: (256, 17, 64)
--Embeddings::Embeddings con codificación posicional: (256, 17, 64)
Embeddings calculados. Shape: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Bloques codificadores procesados. Shape: (256, 17, 64)
Normalización final aplicada.  Shape: (256, 17, 64)
Token CLS extraído. Shape: (256, 64)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (256, 64), b.shape = (64, 10)
Tensor::matrixMultiply: M = 256, N = 64, P = 10
Tensor::matrixMultiply: resultado = (256, 10)
Tensor::matrixMultiply: resultado = (256, 10)
Salida 2D después de la multiplicación: (256, 10)
Salida 2D después de añadir bias: (256, 10)
start=512, end=768, current_batch_size=256, batch 3/4
Training
Forward pass del Vision Transformer...
Batch size: 256
Batch size: 256
Parches aplanados: (4096, 49)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (4096, 49), b.shape = (49, 64)
Tensor::matrixMultiply: M = 4096, N = 49, P = 64
Tensor::matrixMultiply: resultado = (4096, 64)
Tensor::matrixMultiply: resultado = (4096, 64)
Salida 2D después de la multiplicación: (4096, 64)
Salida 2D después de añadir bias: (4096, 64)
Parches proyectados: (4096, 64)
--Embeddings::Parches embeddings: (256, 16, 64)
--Embeddings::CLS token batch: (256, 1, 64)
--Embeddings::Embeddings con CLS: (256, 17, 64)
--Embeddings::Embeddings con codificación posicional: (256, 17, 64)
Embeddings calculados. Shape: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 4352, N = 64, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 64)
Tensor::matrixMultiply: a.shape = (4352, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 4352, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (4352, 1024)
Tensor::matrixMultiply: resultado = (4352, 1024)
Salida 2D después de la multiplicación: (4352, 1024)
Salida 2D después de añadir bias: (4352, 1024)
Salida remodelada a 3D: (256, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (4352, 1024)
Tensor::matrixMultiply: a.shape = (4352, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 4352, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (4352, 64)
Tensor::matrixMultiply: resultado = (4352, 64)
Salida 2D después de la multiplicación: (4352, 64)
Salida 2D después de añadir bias: (4352, 64)
Salida remodelada a 3D: (256, 17, 64)
Bloques codificadores procesados. Shape: (256, 17, 64)
Normalización final aplicada.  Shape: (256, 17, 64)
Token CLS extraído. Shape: (256, 64)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (256, 64), b.shape = (64, 10)
Tensor::matrixMultiply: M = 256, N = 64, P = 10
Tensor::matrixMultiply: resultado = (256, 10)
Tensor::matrixMultiply: resultado = (256, 10)
Salida 2D después de la multiplicación: (256, 10)
Salida 2D después de añadir bias: (256, 10)
start=768, end=1000, current_batch_size=232, batch 4/4
Training
Forward pass del Vision Transformer...
Batch size: 232
Batch size: 232
Parches aplanados: (3712, 49)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (3712, 49), b.shape = (49, 64)
Tensor::matrixMultiply: M = 3712, N = 49, P = 64
Tensor::matrixMultiply: resultado = (3712, 64)
Tensor::matrixMultiply: resultado = (3712, 64)
Salida 2D después de la multiplicación: (3712, 64)
Salida 2D después de añadir bias: (3712, 64)
Parches proyectados: (3712, 64)
--Embeddings::Parches embeddings: (232, 16, 64)
--Embeddings::CLS token batch: (232, 1, 64)
--Embeddings::Embeddings con CLS: (232, 17, 64)
--Embeddings::Embeddings con codificación posicional: (232, 17, 64)
Embeddings calculados. Shape: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 3944, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (3944, 1024)
Tensor::matrixMultiply: resultado = (3944, 1024)
Salida 2D después de la multiplicación: (3944, 1024)
Salida 2D después de añadir bias: (3944, 1024)
Salida remodelada a 3D: (232, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 1024)
Tensor::matrixMultiply: a.shape = (3944, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 3944, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 3944, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (3944, 1024)
Tensor::matrixMultiply: resultado = (3944, 1024)
Salida 2D después de la multiplicación: (3944, 1024)
Salida 2D después de añadir bias: (3944, 1024)
Salida remodelada a 3D: (232, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 1024)
Tensor::matrixMultiply: a.shape = (3944, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 3944, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 3944, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (3944, 1024)
Tensor::matrixMultiply: resultado = (3944, 1024)
Salida 2D después de la multiplicación: (3944, 1024)
Salida 2D después de añadir bias: (3944, 1024)
Salida remodelada a 3D: (232, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 1024)
Tensor::matrixMultiply: a.shape = (3944, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 3944, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 3944, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (3944, 1024)
Tensor::matrixMultiply: resultado = (3944, 1024)
Salida 2D después de la multiplicación: (3944, 1024)
Salida 2D después de añadir bias: (3944, 1024)
Salida remodelada a 3D: (232, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 1024)
Tensor::matrixMultiply: a.shape = (3944, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 3944, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 3944, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (3944, 1024)
Tensor::matrixMultiply: resultado = (3944, 1024)
Salida 2D después de la multiplicación: (3944, 1024)
Salida 2D después de añadir bias: (3944, 1024)
Salida remodelada a 3D: (232, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 1024)
Tensor::matrixMultiply: a.shape = (3944, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 3944, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 64)
Tensor::matrixMultiply: M = 3944, N = 64, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 64)
Tensor::matrixMultiply: a.shape = (3944, 64), b.shape = (64, 1024)
Tensor::matrixMultiply: M = 3944, N = 64, P = 1024
Tensor::matrixMultiply: resultado = (3944, 1024)
Tensor::matrixMultiply: resultado = (3944, 1024)
Salida 2D después de la multiplicación: (3944, 1024)
Salida 2D después de añadir bias: (3944, 1024)
Salida remodelada a 3D: (232, 17, 1024)
Entrada 3D detectada. Aplanando a 2D...
Entrada remodelada a 2D: (3944, 1024)
Tensor::matrixMultiply: a.shape = (3944, 1024), b.shape = (1024, 64)
Tensor::matrixMultiply: M = 3944, N = 1024, P = 64
Tensor::matrixMultiply: resultado = (3944, 64)
Tensor::matrixMultiply: resultado = (3944, 64)
Salida 2D después de la multiplicación: (3944, 64)
Salida 2D después de añadir bias: (3944, 64)
Salida remodelada a 3D: (232, 17, 64)
Bloques codificadores procesados. Shape: (232, 17, 64)
Normalización final aplicada.  Shape: (232, 17, 64)
Token CLS extraído. Shape: (232, 64)
Entrada 2D detectada. Procesando directamente...
Tensor::matrixMultiply: a.shape = (232, 64), b.shape = (64, 10)
Tensor::matrixMultiply: M = 232, N = 64, P = 10
Tensor::matrixMultiply: resultado = (232, 10)
Tensor::matrixMultiply: resultado = (232, 10)
Salida 2D después de la multiplicación: (232, 10)
Salida 2D después de añadir bias: (232, 10)
=========== Estado de los pesos tras el forward ===========
[DEBUG] Tensor #0 ((49, 64)) Checksum = -1.01448
[DEBUG] Primeros valores: 0.00432787 0.0400063 -0.0570589 
[DEBUG] Tensor #1 ((1, 64)) Checksum = -0.0194614
[DEBUG] Primeros valores: 0.0307058 -1.17561e-05 0.0213831 
[DEBUG] Tensor #2 ((1, 1, 64)) Checksum = -0.230074
[DEBUG] Primeros valores: -0.0550725 -0.00761175 -0.02527 
[DEBUG] Tensor #3 ((1, 17, 64)) Checksum = -0.677653
[DEBUG] Primeros valores: -0.00395322 0.0453598 -0.00618457 
[DEBUG] Tensor #4 ((1, 64)) Checksum = 95.0785
[DEBUG] Primeros valores: 1.43239 1.42728 1.44786 
[DEBUG] Tensor #5 ((1, 64)) Checksum = -0.0810142
[DEBUG] Primeros valores: -0.032436 -0.00715777 -0.0309516 
[DEBUG] Tensor #6 ((64, 64)) Checksum = -1.53026
[DEBUG] Primeros valores: 0.0928652 -0.0190143 -0.00970671 
[DEBUG] Tensor #7 ((1, 64)) Checksum = -0.379053
[DEBUG] Primeros valores: -0.0739576 0.041685 -0.0377082 
[DEBUG] Tensor #8 ((64, 64)) Checksum = 1.34679
[DEBUG] Primeros valores: -0.145923 -0.0925643 -0.0764459 
[DEBUG] Tensor #9 ((1, 64)) Checksum = 0.102565
[DEBUG] Primeros valores: 0.0853495 -0.0645855 -0.0212572 
[DEBUG] Tensor #10 ((64, 64)) Checksum = -1.93064
[DEBUG] Primeros valores: 0.0314821 0.0690939 -0.0184949 
[DEBUG] Tensor #11 ((1, 64)) Checksum = -0.034992
[DEBUG] Primeros valores: -0.0133084 -0.00352533 -0.013987 
[DEBUG] Tensor #12 ((64, 64)) Checksum = -1.84918
[DEBUG] Primeros valores: 0.0542157 0.0457754 0.00580009 
[DEBUG] Tensor #13 ((1, 64)) Checksum = 0.0401888
[DEBUG] Primeros valores: 0.0036875 -0.00597924 -0.00583867 
[DEBUG] Tensor #14 ((1, 64)) Checksum = 63.606
[DEBUG] Primeros valores: 1.01963 1.04821 0.987765 
[DEBUG] Tensor #15 ((1, 64)) Checksum = 0.0787019
[DEBUG] Primeros valores: 0.011974 -0.00350521 -0.00409797 
[DEBUG] Tensor #16 ((64, 1024)) Checksum = -9.29709
[DEBUG] Primeros valores: -0.0403375 -0.0267875 0.0106686 
[DEBUG] Tensor #17 ((1, 1024)) Checksum = -14.7323
[DEBUG] Primeros valores: -0.00962332 -0.0155265 -0.0162306 
[DEBUG] Tensor #18 ((1024, 64)) Checksum = 5.59238
[DEBUG] Primeros valores: -0.00113888 0.00552884 0.0208724 
[DEBUG] Tensor #19 ((1, 64)) Checksum = -0.0239869
[DEBUG] Primeros valores: -0.016281 -0.00243289 -0.0115162 
[DEBUG] Tensor #20 ((1, 64)) Checksum = 88.8879
[DEBUG] Primeros valores: 1.50312 1.39028 1.39286 
[DEBUG] Tensor #21 ((1, 64)) Checksum = -0.174312
[DEBUG] Primeros valores: -0.164815 -0.0416719 0.0614216 
[DEBUG] Tensor #22 ((64, 64)) Checksum = 0.922946
[DEBUG] Primeros valores: -0.0210128 0.00814519 -0.0655544 
[DEBUG] Tensor #23 ((1, 64)) Checksum = 0.906304
[DEBUG] Primeros valores: -0.00493858 0.0286415 0.0106162 
[DEBUG] Tensor #24 ((64, 64)) Checksum = -0.883882
[DEBUG] Primeros valores: -0.111039 -0.11491 0.168383 
[DEBUG] Tensor #25 ((1, 64)) Checksum = -0.00445271
[DEBUG] Primeros valores: 0.107926 0.0825771 -0.0517846 
[DEBUG] Tensor #26 ((64, 64)) Checksum = -0.886367
[DEBUG] Primeros valores: -0.000342317 -0.042238 -0.0256646 
[DEBUG] Tensor #27 ((1, 64)) Checksum = -0.10332
[DEBUG] Primeros valores: -0.00253922 0.00974262 -0.00859499 
[DEBUG] Tensor #28 ((64, 64)) Checksum = -0.584054
[DEBUG] Primeros valores: -0.085616 -0.0118025 0.0260994 
[DEBUG] Tensor #29 ((1, 64)) Checksum = -0.00292524
[DEBUG] Primeros valores: -0.00406598 -0.00429016 -0.00676752 
[DEBUG] Tensor #30 ((1, 64)) Checksum = 62.0276
[DEBUG] Primeros valores: 0.902624 0.931439 0.965092 
[DEBUG] Tensor #31 ((1, 64)) Checksum = -0.0254486
[DEBUG] Primeros valores: 0.00834427 -0.00145278 0.00494639 
[DEBUG] Tensor #32 ((64, 1024)) Checksum = 5.89718
[DEBUG] Primeros valores: 0.00522533 -0.0105373 -0.00194582 
[DEBUG] Tensor #33 ((1, 1024)) Checksum = -14.3576
[DEBUG] Primeros valores: -0.0158214 -0.0108859 -0.00926926 
[DEBUG] Tensor #34 ((1024, 64)) Checksum = -0.783857
[DEBUG] Primeros valores: 0.0129106 -0.00973309 0.0231481 
[DEBUG] Tensor #35 ((1, 64)) Checksum = 0.0206865
[DEBUG] Primeros valores: -0.00282313 0.000746134 0.00561429 
[DEBUG] Tensor #36 ((1, 64)) Checksum = 102.718
[DEBUG] Primeros valores: 1.54788 1.64372 1.73925 
[DEBUG] Tensor #37 ((1, 64)) Checksum = 0.266182
[DEBUG] Primeros valores: -0.163124 -0.0530403 0.0506026 
[DEBUG] Tensor #38 ((64, 64)) Checksum = -0.790924
[DEBUG] Primeros valores: -0.0644565 0.105158 0.00352346 
[DEBUG] Tensor #39 ((1, 64)) Checksum = 0.253318
[DEBUG] Primeros valores: 0.00269782 -0.0934048 0.0101726 
[DEBUG] Tensor #40 ((64, 64)) Checksum = 1.34695
[DEBUG] Primeros valores: 0.0636318 -0.581837 -0.0415608 
[DEBUG] Tensor #41 ((1, 64)) Checksum = 0.269679
[DEBUG] Primeros valores: 0.0995985 0.0375253 0.357081 
[DEBUG] Tensor #42 ((64, 64)) Checksum = -0.384925
[DEBUG] Primeros valores: -0.0456084 -0.00200131 0.00726347 
[DEBUG] Tensor #43 ((1, 64)) Checksum = -0.0386625
[DEBUG] Primeros valores: -0.000465638 0.00264597 0.00985954 
[DEBUG] Tensor #44 ((64, 64)) Checksum = 0.60818
[DEBUG] Primeros valores: 0.0362173 0.0130513 0.00616388 
[DEBUG] Tensor #45 ((1, 64)) Checksum = -0.00450681
[DEBUG] Primeros valores: 0.00237409 0.00567091 0.0151164 
[DEBUG] Tensor #46 ((1, 64)) Checksum = 58.5737
[DEBUG] Primeros valores: 0.889957 0.882598 0.900804 
[DEBUG] Tensor #47 ((1, 64)) Checksum = 0.0313432
[DEBUG] Primeros valores: 0.0233924 0.000501078 0.0034528 
[DEBUG] Tensor #48 ((64, 1024)) Checksum = -8.4876
[DEBUG] Primeros valores: -0.0109669 0.0292113 0.0253102 
[DEBUG] Tensor #49 ((1, 1024)) Checksum = -9.52967
[DEBUG] Primeros valores: -0.0181139 -0.0238477 -0.00787158 
[DEBUG] Tensor #50 ((1024, 64)) Checksum = 1.88362
[DEBUG] Primeros valores: -0.0343152 0.0230877 -0.023281 
[DEBUG] Tensor #51 ((1, 64)) Checksum = -0.0263331
[DEBUG] Primeros valores: 0.000865743 0.00333899 0.00769591 
[DEBUG] Tensor #52 ((1, 64)) Checksum = 73.7607
[DEBUG] Primeros valores: 1.0837 1.15402 1.20582 
[DEBUG] Tensor #53 ((1, 64)) Checksum = 0.0159266
[DEBUG] Primeros valores: 0.0183256 0.0169761 0.0120238 
[DEBUG] Tensor #54 ((64, 64)) Checksum = -0.325962
[DEBUG] Primeros valores: -0.0141721 0.0155704 -0.02096 
[DEBUG] Tensor #55 ((1, 64)) Checksum = -0.131482
[DEBUG] Primeros valores: 0.0314578 -0.0136229 -0.024097 
[DEBUG] Tensor #56 ((64, 64)) Checksum = 1.31821
[DEBUG] Primeros valores: -0.0938675 0.0760553 0.0397671 
[DEBUG] Tensor #57 ((1, 64)) Checksum = -0.00247554
[DEBUG] Primeros valores: -0.16683 0.277163 -0.0660877 
[DEBUG] Tensor #58 ((64, 64)) Checksum = -0.114532
[DEBUG] Primeros valores: 0.0335273 0.042498 0.0361757 
[DEBUG] Tensor #59 ((1, 64)) Checksum = -0.0884206
[DEBUG] Primeros valores: 0.0129143 0.0075859 0.00094539 
[DEBUG] Tensor #60 ((64, 64)) Checksum = 1.41418
[DEBUG] Primeros valores: -0.0163991 -0.0585152 0.0510943 
[DEBUG] Tensor #61 ((1, 64)) Checksum = -0.0288604
[DEBUG] Primeros valores: -0.00888873 0.00284608 -0.0014358 
[DEBUG] Tensor #62 ((1, 64)) Checksum = 58.0097
[DEBUG] Primeros valores: 0.966815 0.94904 0.90235 
[DEBUG] Tensor #63 ((1, 64)) Checksum = -0.0388203
[DEBUG] Primeros valores: -0.00882437 0.0174572 -0.00147881 
[DEBUG] Tensor #64 ((64, 1024)) Checksum = 2.53867
[DEBUG] Primeros valores: 0.00361253 0.0169305 0.00481789 
[DEBUG] Tensor #65 ((1, 1024)) Checksum = -8.1599
[DEBUG] Primeros valores: -0.00594181 0.000181578 -0.0161435 
[DEBUG] Tensor #66 ((1024, 64)) Checksum = 3.01883
[DEBUG] Primeros valores: 0.00468434 -0.0134006 0.00840403 
[DEBUG] Tensor #67 ((1, 64)) Checksum = 0.00330589
[DEBUG] Primeros valores: 0.00721424 -0.00610222 0.000763564 
[DEBUG] Tensor #68 ((1, 64)) Checksum = 90.8345
[DEBUG] Primeros valores: 1.57338 1.60816 1.24701 
[DEBUG] Tensor #69 ((1, 64)) Checksum = 0.0724128
[DEBUG] Primeros valores: 0.136566 0.053933 -0.0329892 
[DEBUG] Tensor #70 ((64, 64)) Checksum = 0.479756
[DEBUG] Primeros valores: -0.072297 0.00558441 0.00429603 
[DEBUG] Tensor #71 ((1, 64)) Checksum = 0.523967
[DEBUG] Primeros valores: 0.0500932 0.0132233 0.0129064 
[DEBUG] Tensor #72 ((64, 64)) Checksum = -3.61776
[DEBUG] Primeros valores: -0.0699511 0.231999 -0.191634 
[DEBUG] Tensor #73 ((1, 64)) Checksum = 0.0790643
[DEBUG] Primeros valores: -0.325358 -0.203874 -0.0495288 
[DEBUG] Tensor #74 ((64, 64)) Checksum = 1.68984
[DEBUG] Primeros valores: -0.0334744 -0.0584579 -0.0191849 
[DEBUG] Tensor #75 ((1, 64)) Checksum = -0.0843863
[DEBUG] Primeros valores: 0.00282924 0.000507511 0.00433527 
[DEBUG] Tensor #76 ((64, 64)) Checksum = -1.50486
[DEBUG] Primeros valores: 0.0740126 -0.0753944 -0.037831 
[DEBUG] Tensor #77 ((1, 64)) Checksum = 0.00921021
[DEBUG] Primeros valores: 0.0312984 0.009616 -0.0165635 
[DEBUG] Tensor #78 ((1, 64)) Checksum = 57.4409
[DEBUG] Primeros valores: 0.912334 0.898207 0.872448 
[DEBUG] Tensor #79 ((1, 64)) Checksum = -0.0171823
[DEBUG] Primeros valores: -0.00107341 0.0274498 4.4754e-05 
[DEBUG] Tensor #80 ((64, 1024)) Checksum = 4.57026
[DEBUG] Primeros valores: -0.0195001 0.00201195 0.0745289 
[DEBUG] Tensor #81 ((1, 1024)) Checksum = -4.51581
[DEBUG] Primeros valores: -0.00136067 -0.00728404 -0.0180893 
[DEBUG] Tensor #82 ((1024, 64)) Checksum = 2.76985
[DEBUG] Primeros valores: 0.0408938 0.00583576 0.00668041 
[DEBUG] Tensor #83 ((1, 64)) Checksum = 0.0364437
[DEBUG] Primeros valores: 0.0372741 0.0100092 -0.0108818 
[DEBUG] Tensor #84 ((1, 64)) Checksum = 73.7607
[DEBUG] Primeros valores: 1.28463 1.19833 1.19185 
[DEBUG] Tensor #85 ((1, 64)) Checksum = 0.33176
[DEBUG] Primeros valores: 0.33399 0.176453 -0.191606 
[DEBUG] Tensor #86 ((64, 64)) Checksum = 2.42866
[DEBUG] Primeros valores: -0.0602244 0.0351468 -0.0219301 
[DEBUG] Tensor #87 ((1, 64)) Checksum = 0.348745
[DEBUG] Primeros valores: 0.0320429 -0.0445613 0.031488 
[DEBUG] Tensor #88 ((64, 64)) Checksum = -2.07771
[DEBUG] Primeros valores: -0.153592 0.119243 0.127309 
[DEBUG] Tensor #89 ((1, 64)) Checksum = -0.0693012
[DEBUG] Primeros valores: 0.138434 -0.100098 0.0508979 
[DEBUG] Tensor #90 ((64, 64)) Checksum = 0.522727
[DEBUG] Primeros valores: -0.043632 0.00704518 -0.00961767 
[DEBUG] Tensor #91 ((1, 64)) Checksum = 0.0280152
[DEBUG] Primeros valores: 0.00401373 0.0136684 -0.0121639 
[DEBUG] Tensor #92 ((64, 64)) Checksum = -1.20014
[DEBUG] Primeros valores: -0.0725862 0.05233 0.024443 
[DEBUG] Tensor #93 ((1, 64)) Checksum = 0.000760712
[DEBUG] Primeros valores: 0.0183045 0.0134259 0.00831602 
[DEBUG] Tensor #94 ((1, 64)) Checksum = 58.375
[DEBUG] Primeros valores: 0.933298 0.915717 0.901674 
[DEBUG] Tensor #95 ((1, 64)) Checksum = 0.0102318
[DEBUG] Primeros valores: -0.000307171 0.0208086 0.0120181 
[DEBUG] Tensor #96 ((64, 1024)) Checksum = -1.78154
[DEBUG] Primeros valores: 0.00139703 0.00157543 0.000675326 
[DEBUG] Tensor #97 ((1, 1024)) Checksum = -4.89161
[DEBUG] Primeros valores: -0.00107274 -0.00100462 -0.000180627 
[DEBUG] Tensor #98 ((1024, 64)) Checksum = -9.65287
[DEBUG] Primeros valores: -0.000354468 -0.000417523 0.000418945 
[DEBUG] Tensor #99 ((1, 64)) Checksum = -0.0077186
[DEBUG] Primeros valores: 0.0236264 0.000778961 -0.00829566 
[DEBUG] Tensor #100 ((1, 64)) Checksum = 81.196
[DEBUG] Primeros valores: 1.20172 1.2925 1.27356 
[DEBUG] Tensor #101 ((1, 64)) Checksum = 0.0718626
[DEBUG] Primeros valores: 0.0340012 -0.0575711 -0.0122952 
[DEBUG] Tensor #102 ((64, 10)) Checksum = -0.847567
[DEBUG] Primeros valores: 0.0145902 -0.0811997 0.112392 
[DEBUG] Tensor #103 ((1, 10)) Checksum = -0.0571152
[DEBUG] Primeros valores: -0.0694204 -0.032103 0.0168141 
=========== Fin del Debug ===========

Accuracy del modelo: 12.1%

=== Métricas por clase ===
+--------+---------------+---------------+---------------+
|Clase   |Precision      |Recall         |F1-score       |
+--------+---------------+---------------+---------------+
|0       |0.0704225      |0.0641026      |0.0671141      |
|1       |0.121212       |0.0672269      |0.0864865      |
|2       |0.125926       |0.182796       |0.149123       |
|3       |0.150943       |0.15534        |0.15311        |
|4       |0.0731707      |0.0322581      |0.0447761      |
|5       |0.114865       |0.163462       |0.134921       |
|6       |0.170213       |0.0833333      |0.111888       |
|7       |0.144068       |0.155963       |0.14978        |
|8       |0.114583       |0.205607       |0.147157       |
|9       |0.105263       |0.0816327      |0.091954       |
+--------+---------------+---------------+---------------+

=== Matriz de Confusión normalizada (por filas) ===
       0     1     2     3     4     5     6     7     8     9     
-------------------------------------------------------------------
0     |[1;32m6.41  [0m6.41  6.41  12.82 0.00  15.38 6.41  12.82 25.64 7.69  
1     |9.24  [1;32m6.72  [0m12.61 12.61 3.36  19.33 5.04  5.88  19.33 5.88  
2     |5.38  4.30  [1;32m18.28 [0m12.90 4.30  12.90 1.08  17.20 18.28 5.38  
3     |3.88  10.68 12.62 [1;32m15.53 [0m3.88  16.50 3.88  8.74  14.56 9.71  
4     |8.60  4.30  16.13 8.60  [1;32m3.23  [0m16.13 4.30  10.75 16.13 11.83 
5     |5.77  8.65  12.50 10.58 3.85  [1;32m16.35 [0m5.77  12.50 21.15 2.88  
6     |7.29  2.08  16.67 7.29  8.33  10.42 [1;32m8.33  [0m14.58 16.67 8.33  
7     |11.01 7.34  11.93 6.42  3.67  11.93 5.50  [1;32m15.60 [0m20.18 6.42  
8     |5.61  4.67  14.95 10.28 6.54  12.15 4.67  10.28 [1;32m20.56 [0m10.28 
9     |7.14  10.20 12.24 9.18  3.06  16.33 2.04  11.22 20.41 [1;32m8.16  [0m
-------------------------------------------------------------------
(valores en % — diagonal resaltada)

--- Pruebas finalizadas ---
